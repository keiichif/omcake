<?php
declare(strict_types=1);

namespace App\Controller;

use Authentication\PasswordHasher\DefaultPasswordHasher;
use Cake\I18n\FrozenDate;
use Cake\Validation\Validator;


/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{

    
    public function initialize(): void
    {
        parent::initialize();
        
        $this->loadComponent('MrCommon');
        $this->loadComponent('OrcaApi');
        
        
        $this->viewBuilder()->setLayout('mr-common');

        // ORCA職員情報を元にmrユーザをアップデート
        $workerlist = $this->OrcaApi->get_worker_list();
        $this->delete_invalid_users($workerlist);
        $this->add_new_users($workerlist);        
    }

    
    public function beforeFilter(\Cake\Event\EventInterface $event)
    {
        parent::beforeFilter($event);
        // 認証を必要としないログインアクションを構成し、
        // 無限リダイレクトループの問題を防ぎます
        $this->Authentication->addUnauthenticatedActions(['login', 'logout']);
    }
    
    
// actions autogenerated by bake  ----------------------------------------

    
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    /*
    public function index()  // by bake
    {
        $users = $this->paginate($this->Users);

        $this->set(compact('users'));
    }
    */

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    /*
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        $this->set(compact('user'));
    }
    */
    
    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    /*
    public function add()
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
    }
    */
    
    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    /*
    public function edit($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
    }
    */
    
    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    /*
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    */

    
// end of actions autogenerated by bake ------------------------------------

    
// actions -----------------------------------------------------------------
    
    public function index() 
    {
    }

    
    public function enterNewpassword($id = null)
    {
        if ($id === null) return $this->redirect(['action'=>'logout']);
        
        $this->request->allowMethod(['get', 'post']); // マニュアルどおり。入れる理由は不明。        
        $result = $this->Authentication->getResult();
        if (!$result->isValid()) return $this->redirect(['action'=>'logout']);
    
        $user = $this->Users->get($id);
        $user = $this->Users->patchEntity($user, ['is_entering_newpw'=>true]);
        $this->Users->save($user);
        
        $userid = $user->userid;
        $curr_pw = $user->password;
        
        if ($this->request->is('post')) {
            $data = $this->request->getData();
            $register_pw = array_key_exists('btn_register_pw', $data) ? true : false;
            $cancel = array_key_exists('btn_cancel', $data) ? true : false;
            $new_pw = $data['new_pw'];
            $hasher = new DefaultPasswordHasher();
            $data['is_changed'] = (int)!($hasher->check($new_pw, $curr_pw));

            $validator = new Validator();
            $validator->lengthBetween('new_pw', [8, 256], '8〜256文字で。')
                      ->ascii('new_pw', '半角文字で。')
                      ->equals('is_changed', 1, 'パスワードを変更してください。')
                      ->notEquals('new_pw', $userid, 'ユーザIDはパスワードには使えません。')
                        ;
            $errors = $validator->validate($data);
            var_dump($errors);
            $messages = '';
            foreach($errors as $obj) {
                $keys_validate = array_keys($obj);
                foreach ($keys_validate as $key) $messages .= $obj[$key];
            }

            if ($register_pw && ($errors === [])) {
                $user = $this->Users->patchEntity($user, ['password'=>$new_pw, 'is_entering_newpw'=>false]);
                $this->Users->save($user);
                $this->log($userid . ' changed password.', 'info');
                return $this->redirect(['action'=>'logout']);
            } elseif ($cancel) {
                $user = $this->Users->patchEntity($user, ['is_entering_newpw'=>false]);
                $this->Users->save($user);
                return $this->redirect(['action'=>'logout']);
            } else {
                $this->Flash->error($messages);
            }
        }
    }


    public function login()
    {
        $this->request->allowMethod(['get', 'post']); // マニュアルどおり。入れる理由は不明。
        $result = $this->Authentication->getResult();
        $redirect = $this->request->getQuery('redirect');
        
        if (!$this->MrCommon->is_allowed_ip()) {
            $error = 'アクセス許可がありません。';
            return $this->redirect(['action'=>'logout', '?'=>['error'=>$error]]);
        }
        
        if ($this->request->is('post')) {
            $entered_pw = $this->request->getData('password', '');
            if ($result->isValid()) {
                $user = $this->request->getAttribute('identity');
                $id = $user->id;
                $userid = $user->userid;

                if ($entered_pw === $userid) { // 初期パスワードなら変更させる。
                    return $this->redirect(['action'=>'enter-newpassword', $id]);
                } elseif ($this->request->getData('btn_change_pw')) {
                    return $this->redirect(['action'=>'enter-newpassword', $id]);        
                } else {
                    $this->log($this->request->getAttribute('identity')->userid . ' logged in.', 'info');
                    var_dump($redirect);
                    if (!$redirect || $redirect === '/users/login') {
                        return $this->redirect ('/users/login-success');
                    } else {
                        return $this->redirect($redirect);
                    }
                }
            } else {
                $this->Flash->error('正しく入力してください。');
            }
        }
    }


    public function loginSuccess()
    {        
        $this->userid = $this->request->getAttribute('identity')->userid;
        $workerlist = $this->OrcaApi->get_worker_list();
        foreach ($workerlist as $obj) {
            if ($obj['user_id'] === $this->userid) {
                $username = preg_replace('/　/', ' ', $obj['name']);
                break;
            }
        }
        $this->set('username', $username);
    }
    
    public function logout()
    {
        $error = $this->request->getQuery('error', '');
        $result = $this->Authentication->getResult();
            $this->Flash->error($error);
        if ($result->isValid()) {
            $userid = $this->request->getAttribute('identity')->userid;
            $this->Authentication->logout();
            $this->log($userid . ' logged out.', 'info');
        }
    }

    
// methods --------------------------------------------------------------

    
    public function add_new_users($workerlist)
    {
        $hasher = new DefaultPasswordHasher();
        $today = FrozenDate::today()->format('Ymd'); // 20220101
        foreach ($workerlist as $obj) {
            $userid = $obj['user_id'];
            $name = $obj['name'];
            $start_date = $obj['start_date'];
            $expiry_date = $obj['expiry_date'];
            
            if ($today < $start_date || $expiry_date < $today) continue;

            if (!$this->Users->exists(['userid'=>$userid])) {
                $user = $this->Users->newEmptyEntity();
                //初期パスワードはuseridと同一にする。
                $user = $this->Users->patchEntity($user, ['userid'=>$userid, 'password'=>$userid]);
                $this->Users->save($user);
                $this->log($userid . ';'.$name . ' added to table Users.', 'info');
            }
        }
    }

    
    public function delete_invalid_users($workerlist)
    {
        // 本日時点でORCAユーザIDが有効でなければ削除。
        $today = FrozenDate::today()->format('Ymd'); // 20220101
        foreach ($workerlist as $obj) {
            $userid = $obj['user_id'];
            $name = $obj['name'];
            $start_date = $obj['start_date'];
            $expiry_date = $obj['expiry_date'];
            $orca_userid_list[] = $userid; // 次のforeachブロックで使う。
            
            if ($today < $start_date || $expiry_date < $today) {            
                $query = $this->Users->find()->where(['userid'=>$userid]);
                $user = $query->first();
                $this->Users->delete($user);
                $this->log($userid . ';' . $name . ' deleted from table Users.', 'info');
            }
        }
        
        // ORCAに存在しないユーザIDは削除。
        $query = $this->Users->find('all');
        foreach ($query->all() as $row) {
            if (!in_array($row->userid, $orca_userid_list)) {
                $query = $this->Users->find()->where(['userid'=>$row->userid]);
                $user = $query->first();
                $this->Users->delete($user);
                $this->log($userid .  ';' . $name . ' deleted from table Users.', 'info');
            }
        }
    }
}
